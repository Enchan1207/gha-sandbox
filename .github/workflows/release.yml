#
# リリース時に走るワークフロー
#

name: release information

on:
  release:
    types:
      - released

env:
  release_version_pattern: "^(v[1-9]\\.[0-9]\\.[0-9])$"
  release_branch_pattern: "^(v[1-9])\\.[0-9]\\.[0-9]$"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: setup git
        run: |
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"

      - name: identify branch name from ref
        id: release_info
        run: |
          githubRef=${{ github.event.release.tag_name  }}
          echo "$githubRef"
          branchName=$( echo "$githubRef" \
            | sed -rn "/${{ env.release_branch_pattern }}/p" \
            | sed -r "s/${{ env.release_branch_pattern }}/\1/" )
          if [ -n "$branchName" ]; then
            echo "switch to branch $branchName (from ref $githubRef)"
          else
            echo "::error::ref $githubRef is not valid."
            exit 1
          fi
          echo "ref=$githubRef" >> "$GITHUB_OUTPUT"
          echo "branch_name=$branchName" >> "$GITHUB_OUTPUT"

      - name: switch and pull to specified release branch
        run: |
          branchName=${{ steps.release_info.outputs.branch_name }}
          git fetch origin $branchName && isRemoteExists=1 || isRemoteExists=0
          if [ $isRemoteExists -eq 1 ]; then
            echo "Remote branch $branchName already exists. switching..."
            git switch $branchName
            git pull origin $branchName
            exit 0
          fi
          git switch $branchName && isLocalExists=1 || isLocalExists=0
          if [ $isLocalExists -eq 1 ]; then
            echo "Local branch $branchName already exists."
            exit 0
          fi
          git switch -c $branchName
          echo "Switched new branch $branchName"

      - name: merge ref and commit
        run: |
          version=$( echo "${{ steps.release_info.outputs.ref }}" \
            | sed -rn "/${{ env.release_version_pattern }}/p" \
            | sed -r "s/${{ env.release_version_pattern }}/\1/" )
          git merge --allow-unrelated-histories -m "[Update] new release: $version" ${{ steps.release_info.outputs.ref }}

      - name: push
        run: git push origin ${{ steps.release_info.outputs.branch_name }}
